// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Part

model User {
  userId        String          @id @default(uuid())
  email         String          @unique
  password      String
  createdAt     DateTime        @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(0)
  profileId     String?         @unique
  profile       Profile?        @relation(fields: [profileId], references: [profileId])
  productReview ProductReview[]
  KidDetails    KidDetails[]
}

model Profile {
  profileId              String    @id @default(uuid())
  fullName               String
  mobileNumber           String?
  address                String?
  role                   UserRoles @default(USER)
  mother                 String?
  motherPhoneNumber      String?
  father                 String?
  fatherPhoneNumber      String?
  aunt                   String?
  auntPhoneNumber        String?
  uncle                  String?
  unclePhoneNumber       String?
  friend                 String?
  friendPhoneNumber      String?
  grandFather            String?
  grandFatherPhoneNumber String?
  grandMother            String?
  grandMotherPhoneNumber String?
  createdAt              DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt              DateTime  @updatedAt @db.Timestamptz(0)
  user                   User?
}

enum UserRoles {
  SUPERADMIN
  ADMIN
  USER
}

// Product Part 

model Category {
  categoryId    String    @id @default(uuid())
  categoryName  String    @unique
  categoryHref  String    @unique
  description   String
  categoryImage String
  createdAt     DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(0)
  product       Product[]
}

model Product {
  productId          String             @id @default(uuid())
  productName        String
  productImage       String[]
  productPrice       Float
  productDescription String
  productStatus      ProductStatus      @default(AVAILABLE)
  categoryId         String
  category           Category           @relation(fields: [categoryId], references: [categoryId])
  createdAt          DateTime           @default(now()) @db.Timestamptz(0)
  updatedAt          DateTime           @updatedAt @db.Timestamptz(0)
  productQA          ProductQA[]
  productReview      ProductReview[]
  // promoCode          PromoCode?
  order              Order[]
  featuredImage      String
  // a many-to-many relationship between products and variations
  productVariations  ProductVariation[]

  // a many-to-many relationship between products and promotions
  promotions Promotion[]
  KidDetails KidDetails?
}

// the model for product variations
// barcodeCode  String    @unique
model ProductVariation {
  variantId    String    @id @default(uuid())
  variantPrice Float
  color        String
  size         String?
  image        String
  stock        Int       @default(0)
  productId    String?
  product      Product?  @relation(fields: [productId], references: [productId], onDelete: SetNull)
  createdAt    DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(0)
  barCodes     BarCode[]
}

model BarCode {
  barcodeId     String           @id @default(uuid())
  code          String           @unique
  barcodeStatus BarcodeStatus    @default(AVAILABLE)
  variantId     String
  variant       ProductVariation @relation(fields: [variantId], references: [variantId])
  createdAt     DateTime         @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime         @updatedAt @db.Timestamptz(0)
}

enum ProductStatus {
  AVAILABLE
  UNAVAILABLE
}

enum BarcodeStatus {
  SOLD
  AVAILABLE
  ACTIVE
  DEACTIVE
}

// model PromoCode {
//   promoCodeId String   @id @default(uuid())
//   promoCode   String   @unique
//   discount    Float
//   expiryDate  DateTime
//   description String
//   productId   String?  @unique
//   product     Product? @relation(fields: [productId], references: [productId], onDelete: SetNull)
//   createdAt   DateTime @default(now()) @db.Timestamptz(0)
//   updatedAt   DateTime @updatedAt @db.Timestamptz(0)
//   order       Order[]
// }

model ProductQA {
  productQaId String   @id @default(uuid())
  question    String
  answer      String
  productId   String?
  product     Product? @relation(fields: [productId], references: [productId], onDelete: SetNull)
  createdAt   DateTime @default(now()) @db.Timestamptz(0)
  updatedAt   DateTime @updatedAt @db.Timestamptz(0)
}

model ProductReview {
  productReviewId String   @id @default(uuid())
  review          String
  rating          Int
  reviewImage     String
  productId       String
  product         Product  @relation(fields: [productId], references: [productId])
  userId          String
  user            User     @relation(fields: [userId], references: [userId])
  createdAt       DateTime @default(now()) @db.Timestamptz(0)
  updatedAt       DateTime @updatedAt @db.Timestamptz(0)
}

model Order {
  orderId         String      @id @default(uuid())
  orderDate       DateTime
  orderStatus     OrderStatus @default(PENDING)
  customerName    String
  customerPhone   String
  customerEmail   String
  customerAddress String
  city            String
  postalCode      String
  productId       String
  product         Product     @relation(fields: [productId], references: [productId])
  // promoCodeId     String?
  // promoCode       PromoCode?  @relation(fields: [promoCodeId], references: [promoCodeId])
  createdAt       DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt       DateTime    @updatedAt @db.Timestamptz(0)
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
  REJECTED
}

model KidDetails {
  kidId          String   @id @default(uuid())
  kidName        String
  kidImage       String
  kidGender      String
  petAddress     String
  kidFathername  String?
  kidFatherphone String?
  kidMothername  String?
  kidMotherphone String?
  kidUnclename   String?
  kidUnclephone  String?
  kidAuntname    String?
  kidAuntphone   String?
  kidFriendname  String?
  kidFriendphone String?
  userId         String
  user           User     @relation(fields: [userId], references: [userId])
  productId      String?  @unique
  product        Product? @relation(fields: [productId], references: [productId])
  createdAt      DateTime @default(now()) @db.Timestamptz(0)
  updatedAt      DateTime @updatedAt @db.Timestamptz(0)
}

// The model for promotions
model Promotion {
  promotionId   String        @id @default(uuid())
  promotionName String
  promoCode     String
  expireDate    DateTime
  type          PromotionType

  // many-to-many relationship between promotions and products
  products Product[]

  // one-to-many relationship between promotion and rules
  promotionRules PromotionRule[]

  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @updatedAt @db.Timestamptz(0)
}

// model for promotion rules
model PromotionRule {
  id          String    @id @default(uuid())
  promotion   Promotion @relation(fields: [promotionId], references: [promotionId])
  promotionId String

  // type of rule, e.g., BuyOneGetOne, DiscountBasedOnAmount
  // typtypee RuleType?

  // For BuyOneGetOne
  buy Int?
  get Int?

  // For DiscountBasedOnAmount
  threshold Float?
  discount  Float?

  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @updatedAt @db.Timestamptz(0)
}

// enum for promotion types
enum PromotionType {
  BUY_ONE_GET_ONE
  DISCOUNT_BASED_ON_AMOUNT
}

// enum for rule types
// enum RuleType {
//   BUY_ONE_GET_ONE
//   DISCOUNT_BASED_ON_AMOUNT
// }

model Testimonial {
  testimonialId          String   @id @default(uuid())
  clientName             String
  clientImage            String
  testimonialTitle       String
  testimonialDescription String
  rating                 String
  createdAt              DateTime @default(now()) @db.Timestamptz(0)
  updatedAt              DateTime @updatedAt @db.Timestamptz(0)
}
