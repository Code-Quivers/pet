// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Part

model User {
  userId        String          @id @default(uuid())
  email         String          @unique
  password      String
  createdAt     DateTime        @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(0)
  profileId     String?         @unique
  profile       Profile?        @relation(fields: [profileId], references: [profileId])
  productReview ProductReview[]
  kidDetails    KidDetails[]
}

model Profile {
  profileId    String    @id @default(uuid())
  fullName     String?
  mobileNumber String?
  address      String?
  role         UserRoles @default(USER)
  createdAt    DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(0)
  user         User?
}

// Product Part 

model Category {
  categoryId    String    @id @default(uuid())
  categoryName  String    @unique
  categoryHref  String    @unique
  description   String
  categoryImage String
  createdAt     DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(0)
  product       Product[]
}

model Product {
  productId            String                    @id @default(uuid())
  productName          String
  productImage         String[]
  productPrice         Float
  productDescription   String
  productStatus        ProductStatus             @default(AVAILABLE)
  categoryId           String?
  category             Category?                 @relation(fields: [categoryId], references: [categoryId], onDelete: SetNull)
  createdAt            DateTime                  @default(now()) @db.Timestamptz(0)
  updatedAt            DateTime                  @updatedAt @db.Timestamptz(0)
  productQA            ProductQA[]
  productReview        ProductReview[]
  // promoCode          PromoCode?
  featuredImage        String
  // a many-to-many relationship between products and variations
  productVariations    ProductVariation[]
  requiredInPromotions BuyItemGetItemPromotion[] @relation("RequiredItems")
  rewardedInPromotions BuyItemGetItemPromotion[] @relation("RewardItems")
}

// the model for product variations
// barcodeCode  String    @unique
model ProductVariation {
  variantId    String    @id @default(uuid())
  variantPrice Float
  color        Json
  // size         String?
  image        String
  stock        Int       @default(0)
  productId    String?
  product      Product?  @relation(fields: [productId], references: [productId], onDelete: SetNull)
  createdAt    DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(0)
  barCodes     BarCode[]
}

model BarCode {
  barcodeId     String           @id @default(uuid())
  code          String           @unique
  barcodeStatus BarcodeStatus    @default(INACTIVE)
  variantId     String
  variant       ProductVariation @relation(fields: [variantId], references: [variantId])
  createdAt     DateTime         @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime         @updatedAt @db.Timestamptz(0)
  kidDetails    KidDetails?
}

model ProductQA {
  productQaId String   @id @default(uuid())
  question    String
  answer      String
  productId   String?
  product     Product? @relation(fields: [productId], references: [productId], onDelete: SetNull)
  createdAt   DateTime @default(now()) @db.Timestamptz(0)
  updatedAt   DateTime @updatedAt @db.Timestamptz(0)
}

model ProductReview {
  productReviewId String   @id @default(uuid())
  review          String
  rating          Int
  reviewImage     String
  productId       String
  product         Product  @relation(fields: [productId], references: [productId])
  userId          String
  user            User     @relation(fields: [userId], references: [userId])
  createdAt       DateTime @default(now()) @db.Timestamptz(0)
  updatedAt       DateTime @updatedAt @db.Timestamptz(0)
}

model Order {
  orderId             String      @id @default(uuid())
  orderStatus         OrderStatus @default(PENDING)
  shippingInformation Json
  paymentInformation  Json
  cartItems           Json[]
  // productId       String
  // product         Product     @relation(fields: [productId], references: [productId])
  // promoCodeId     String?
  // promoCode       PromoCode?  @relation(fields: [promoCodeId], references: [promoCodeId])
  createdAt           DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt           DateTime    @updatedAt @db.Timestamptz(0)
}

model KidDetails {
  kidId     String   @id @default(uuid())
  kidName   String
  kidImage  String?
  kidAge    DateTime
  relations Json[]
  barcodeId String?  @unique
  barCode   BarCode? @relation(fields: [barcodeId], references: [barcodeId])
  userId    String?
  user      User?    @relation(fields: [userId], references: [userId], onDelete: SetNull)
  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @updatedAt @db.Timestamptz(0)
}

// The model for promotions
model Promotion {
  promotionId             String                    @id @default(uuid())
  promotionName           String
  promoCode               String
  isActive                Boolean                   @default(false)
  startDate               DateTime?
  endDate                 DateTime?
  type                    PromotionType
  createdAt               DateTime                  @default(now()) @db.Timestamptz(0)
  updatedAt               DateTime                  @updatedAt @db.Timestamptz(0)
  BuyItemGetItemPromotion BuyItemGetItemPromotion[]
}

// Define schema for buy something get something promotion
model BuyItemGetItemPromotion {
  id          Int       @id @default(autoincrement())
  promotionId String
  promotion   Promotion @relation(fields: [promotionId], references: [promotionId])

  requiredItemId   String
  requiredItem     Product @relation("RequiredItems", references: [productId], fields: [requiredItemId])
  requiredQuantity Int     @default(1)

  rewardItemId   String
  rewardItem     Product @relation("RewardItems", references: [productId], fields: [rewardItemId])
  rewardQuantity Int     @default(1)
}

model Testimonial {
  testimonialId          String   @id @default(uuid())
  clientName             String
  clientImage            String
  testimonialTitle       String
  testimonialDescription String
  rating                 String
  createdAt              DateTime @default(now()) @db.Timestamptz(0)
  updatedAt              DateTime @updatedAt @db.Timestamptz(0)
}

model Blogs {
  blogId       String @id @default(uuid())
  title        String
  description  String
  blogImage    String
  categoryName String
  blogHref     String @unique

  // 
  createdAt DateTime   @default(now()) @db.Timestamptz(0)
  updatedAt DateTime   @updatedAt @db.Timestamptz(0)
  comments  Comments[]
}

model Comments {
  commentId String   @id @default(uuid())
  name      String
  email     String
  comment   String
  // 
  blogId    String?
  blog      Blogs?   @relation(fields: [blogId], references: [blogId], onDelete: SetNull)
  // 
  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @updatedAt @db.Timestamptz(0)
}

// ! enums -----------------------------------

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
  REJECTED
}

enum ProductStatus {
  AVAILABLE
  UNAVAILABLE
}

enum BarcodeStatus {
  AVAILABLE
  ACTIVE
  INACTIVE
}

// enum for promotion types
enum PromotionType {
  BUY_ITEM_GET_ITEM
  DISCOUNT_BASED_ON_AMOUNT
}

enum UserRoles {
  SUPERADMIN
  ADMIN
  USER
}

model Tax {
  taxId     String   @id @default(uuid())
  state     String
  tax       Float
  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @updatedAt @db.Timestamptz(0)
}
