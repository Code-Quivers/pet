// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Part

model User {
  userId        String          @id @default(uuid())
  email         String          @unique
  password      String
  createdAt     DateTime        @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(0)
  profileId     String?         @unique
  profile       Profile?        @relation(fields: [profileId], references: [profileId])
  productReview ProductReview[]
  pet           Pet[]
}

model Profile {
  profileId              String    @id @default(uuid())
  fullName               String
  mobileNumber           String?
  address                String?
  role                   UserRoles @default(USER)
  mother                 String?
  motherPhoneNumber      String?
  father                 String?
  fatherPhoneNumber      String?
  aunt                   String?
  auntPhoneNumber        String?
  uncle                  String?
  unclePhoneNumber       String?
  friend                 String?
  friendPhoneNumber      String?
  grandFather            String?
  grandFatherPhoneNumber String?
  grandMother            String?
  grandMotherPhoneNumber String?
  createdAt              DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt              DateTime  @updatedAt @db.Timestamptz(0)
  user                   User?
}

enum UserRoles {
  SUPERADMIN
  ADMIN
  USER
}

// Product Part 

model Category {
  categoryId    String    @id @default(uuid())
  categoryName  String    @unique
  categoryHref  String    @unique
  description   String
  categoryImage String
  createdAt     DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(0)
  product       Product[]
}

model Product {
  productId          String          @id @default(uuid())
  productCode        String          @unique
  productName        String
  productImage       String
  productPrice       Float
  productStock       Int
  productDescription String
  productStatus      ProductStatus   @default(AVAILABLE)
  categoryId         String
  category           Category        @relation(fields: [categoryId], references: [categoryId])
  colorVarientId     String
  colorVarient       ColorVarient    @relation(fields: [colorVarientId], references: [colorVarientId])
  sizeVarientId      String?
  sizeVarient        SizeVarient?    @relation(fields: [sizeVarientId], references: [sizeVarientId])
  createdAt          DateTime        @default(now()) @db.Timestamptz(0)
  updatedAt          DateTime        @updatedAt @db.Timestamptz(0)
  productQA          ProductQA[]
  productReview      ProductReview[]
  Pet                Pet?
  promoCode          PromoCode?
  Order              Order[]
}

enum ProductStatus {
  AVAILABLE
  UNAVAILABLE
}

model PromoCode {
  promoCodeId String   @id @default(uuid())
  promoCode   String   @unique
  discount    Float
  expiryDate  DateTime
  description String
  productId   String?  @unique
  product     Product? @relation(fields: [productId], references: [productId])
  createdAt   DateTime @default(now()) @db.Timestamptz(0)
  updatedAt   DateTime @updatedAt @db.Timestamptz(0)
  order       Order[]
}

model ColorVarient {
  colorVarientId String    @id @default(uuid())
  productColor   String
  createdAt      DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt      DateTime  @updatedAt @db.Timestamptz(0)
  product        Product[]
}

model SizeVarient {
  sizeVarientId String    @id @default(uuid())
  productSize   String
  createdAt     DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(0)
  product       Product[]
}

model ProductQA {
  productQaId String   @id @default(uuid())
  question    String
  answer      String
  productId   String
  product     Product  @relation(fields: [productId], references: [productId])
  createdAt   DateTime @default(now()) @db.Timestamptz(0)
  updatedAt   DateTime @updatedAt @db.Timestamptz(0)
}

model ProductReview {
  productReviewId String   @id @default(uuid())
  review          String
  rating          Int
  reviewImage     String
  productId       String
  product         Product  @relation(fields: [productId], references: [productId])
  userId          String
  user            User     @relation(fields: [userId], references: [userId])
  createdAt       DateTime @default(now()) @db.Timestamptz(0)
  updatedAt       DateTime @updatedAt @db.Timestamptz(0)
}

model Order {
  orderId         String      @id @default(uuid())
  orderDate       DateTime
  orderStatus     OrderStatus @default(PENDING)
  customerName    String
  customerPhone   String
  customerEmail   String
  customerAddress String
  city            String
  postalCode      String
  productId       String
  product         Product     @relation(fields: [productId], references: [productId])
  promoCodeId     String?
  promoCode       PromoCode?  @relation(fields: [promoCodeId], references: [promoCodeId])
  createdAt       DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt       DateTime    @updatedAt @db.Timestamptz(0)
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
  REJECTED
}

model Pet {
  petId          String   @id @default(uuid())
  petName        String
  petImage       String
  petDescription String
  petGender      String
  petAge         String
  petWeight      String
  petAddress     String
  petBehavior    String
  petHealth      String
  petVaccination String
  petProvider    String
  userId         String
  user           User     @relation(fields: [userId], references: [userId])
  productId      String?  @unique
  product        Product? @relation(fields: [productId], references: [productId])
  createdAt      DateTime @default(now()) @db.Timestamptz(0)
  updatedAt      DateTime @updatedAt @db.Timestamptz(0)
}
